{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\n\nvar _this = this,\n    _jsxFileName = \"/Users/keerthivasan/Documents/Projects/Netflix/components/VideoPlayer/index.tsx\";\n\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport * as React from 'react';\nimport styles from \"./styles\";\nimport { Video } from 'expo-av';\nimport { useEffect } from 'react';\nimport { useRef } from 'react';\n\nvar VideoPlayer = function VideoPlayer(props) {\n  var eposide = props.eposide;\n\n  var _React$useState = React.useState({}),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      status = _React$useState2[0],\n      setStatus = _React$useState2[1];\n\n  var video = useRef(null);\n  useEffect(function () {\n    if (!video) {\n      return;\n    }\n\n    (function _callee() {\n      var _video$current, _video$current2;\n\n      return _regeneratorRuntime.async(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return _regeneratorRuntime.awrap(video == null ? void 0 : (_video$current = video.current) == null ? void 0 : _video$current.unloadAsync());\n\n            case 2:\n              _context.next = 4;\n              return _regeneratorRuntime.awrap(video == null ? void 0 : (_video$current2 = video.current) == null ? void 0 : _video$current2.loadAsync({\n                uri: eposide.video\n              }, {}, false));\n\n            case 4:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    })();\n  }, [eposide]);\n  console.log(eposide);\n  return React.createElement(React.Fragment, null, React.createElement(Video, {\n    ref: video,\n    style: styles.video,\n    source: {\n      uri: eposide.video\n    },\n    posterSource: {\n      uri: eposide.poster\n    },\n    posterStyle: {\n      resizeMode: 'cover'\n    },\n    usePoster: true,\n    useNativeControls: true,\n    resizeMode: \"contain\",\n    isLooping: true,\n    onPlaybackStatusUpdate: function onPlaybackStatusUpdate(status) {\n      return setStatus(function () {\n        return status;\n      });\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 17\n    }\n  }));\n};\n\nexport default VideoPlayer;","map":{"version":3,"sources":["/Users/keerthivasan/Documents/Projects/Netflix/components/VideoPlayer/index.tsx"],"names":["React","styles","Video","useEffect","useRef","VideoPlayer","props","eposide","useState","status","setStatus","video","current","unloadAsync","loadAsync","uri","console","log","poster","resizeMode"],"mappings":";;;;;;AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AAEA,OAAOC,MAAP;AAEA,SAASC,KAAT,QAAsB,SAAtB;AAEA,SAASC,SAAT,QAA0B,OAA1B;AACA,SAASC,MAAT,QAAuB,OAAvB;;AAMA,IAAMC,WAAW,GAAG,SAAdA,WAAc,CAACC,KAAD,EAA6B;AAAA,MACrCC,OADqC,GACzBD,KADyB,CACrCC,OADqC;;AAAA,wBAGjBP,KAAK,CAACQ,QAAN,CAAe,EAAf,CAHiB;AAAA;AAAA,MAGtCC,MAHsC;AAAA,MAG9BC,SAH8B;;AAI7C,MAAMC,KAAK,GAAGP,MAAM,CAAW,IAAX,CAApB;AAEAD,EAAAA,SAAS,CAAC,YAAM;AACZ,QAAI,CAACQ,KAAL,EAAY;AACR;AACH;;AACD,KAAC;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+CACSA,KADT,sCACSA,KAAK,CAAEC,OADhB,qBACS,eAAgBC,WAAhB,EADT;;AAAA;AAAA;AAAA,+CAESF,KAFT,uCAESA,KAAK,CAAEC,OAFhB,qBAES,gBAAgBE,SAAhB,CACF;AAAEC,gBAAAA,GAAG,EAAER,OAAO,CAACI;AAAf,eADE,EAEF,EAFE,EAGF,KAHE,CAFT;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAD;AAQH,GAZQ,EAYN,CAACJ,OAAD,CAZM,CAAT;AAcAS,EAAAA,OAAO,CAACC,GAAR,CAAYV,OAAZ;AACA,SACI,0CACQ,oBAAC,KAAD;AACI,IAAA,GAAG,EAAEI,KADT;AAEI,IAAA,KAAK,EAAEV,MAAM,CAACU,KAFlB;AAGI,IAAA,MAAM,EAAE;AAAEI,MAAAA,GAAG,EAAER,OAAO,CAACI;AAAf,KAHZ;AAII,IAAA,YAAY,EAAE;AAAEI,MAAAA,GAAG,EAAER,OAAO,CAACW;AAAf,KAJlB;AAKI,IAAA,WAAW,EAAE;AAAEC,MAAAA,UAAU,EAAE;AAAd,KALjB;AAMI,IAAA,SAAS,EAAE,IANf;AAOI,IAAA,iBAAiB,MAPrB;AAQI,IAAA,UAAU,EAAC,SARf;AASI,IAAA,SAAS,MATb;AAUI,IAAA,sBAAsB,EAAE,gCAAAV,MAAM;AAAA,aAAIC,SAAS,CAAC;AAAA,eAAMD,MAAN;AAAA,OAAD,CAAb;AAAA,KAVlC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADR,CADJ;AAgBH,CArCD;;AAuCA,eAAeJ,WAAf","sourcesContent":["import * as React from 'react';\nimport { Image, Text, View, FlatList } from 'react-native';\nimport styles from './styles';\nimport { Eposide } from '../../types'\nimport { Video } from 'expo-av';\nimport { Playback } from 'expo-av/build/AV';\nimport { useEffect } from 'react';\nimport { useRef } from 'react';\n\ninterface VideoPlayerProps {\n    eposide: Eposide;\n}\n\nconst VideoPlayer = (props: VideoPlayerProps) => {\n    const { eposide } = props;\n\n    const [status, setStatus] = React.useState({});\n    const video = useRef<Playback>(null);\n\n    useEffect(() => {\n        if (!video) {\n            return;\n        }\n        (async () => {\n            await video?.current?.unloadAsync();\n            await video?.current?.loadAsync(\n                { uri: eposide.video },\n                {},\n                false\n            );\n        })();\n    }, [eposide])\n\n    console.log(eposide);\n    return (\n        <>\n                <Video\n                    ref={video}\n                    style={styles.video}\n                    source={{ uri: eposide.video }}\n                    posterSource={{ uri: eposide.poster }}\n                    posterStyle={{ resizeMode: 'cover' }}\n                    usePoster={true}\n                    useNativeControls\n                    resizeMode=\"contain\"\n                    isLooping\n                    onPlaybackStatusUpdate={status => setStatus(() => status)}\n                />\n        </>\n    );\n}\n\nexport default VideoPlayer;\n\n\n"]},"metadata":{},"sourceType":"module"}